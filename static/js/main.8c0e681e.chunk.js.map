{"version":3,"sources":["components/AddCampaign.js","components/Account.js","components/Campaign.js","components/ListCampaign.js","components/App.js","serviceWorker.js","index.js"],"names":["AddCampaign","props","useState","name","keyword","bidAmount","campaignFund","town","radius","status","state","setState","handleInputValueChange","e","target","type","checked","value","className","onSubmit","preventDefault","accountValue","length","alert","add","account","onChange","min","placeholder","id","Account","Campaign","edit","deleteCampaign","isEdit","setIsEdit","editValues","setEditValues","handleEditInputChange","btnStatus","onClick","handleSave","disabled","toUpperCase","ListCampaign","campaignsList","campaigns","map","campaign","key","counter","App","setCampaigns","setAccount","prevState","newCampaignsList","filter","forEach","index","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8c0e681e.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport '../style/AddCampaign.sass';\r\n\r\nconst AddCampaign = (props) => {\r\n    const [state,setState] = useState({\r\n        name: '',\r\n        keyword: '',\r\n        bidAmount: '',\r\n        campaignFund: '',\r\n        town: '',\r\n        radius:'',\r\n        status: false\r\n      })\r\n    \r\n      const handleInputValueChange = e => {\r\n        \r\n        if (e.target.type === \"checkbox\") {\r\n          setState({\r\n            ...state,\r\n            [e.target.name]: e.target.checked,\r\n          })\r\n        } else {\r\n          setState({\r\n            ...state,\r\n            [e.target.name]: e.target.value\r\n          })\r\n        }\r\n        \r\n      }\r\n      const {name, keyword, bidAmount, campaignFund, town, radius, status} = state;\r\n      const handleAddNewTask = e => {\r\n          e.preventDefault();\r\n          \r\n          if(name && keyword && bidAmount && campaignFund<=props.accountValue && town.length > 2 && radius){\r\n            props.add(name, keyword, bidAmount, campaignFund, town, radius, status);\r\n            props.account(campaignFund);\r\n            setState({\r\n                name: '',\r\n                keyword: '',\r\n                bidAmount: '',\r\n                campaignFund: '',\r\n                town: '',\r\n                radius:'',\r\n                status: false\r\n              })\r\n        }\r\n        else if (campaignFund>props.accountValue) return alert('Not enough money on company accout - change Campaign Fund')\r\n\r\n        else return alert(\"Some values are missing - please add all\")\r\n      }\r\n\r\n    return (\r\n        <>\r\n        <h1>Add new campaign</h1>\r\n        <form className='add-campaign' onSubmit={handleAddNewTask}>\r\n            <label>Campaign name</label>\r\n            <input name=\"name\" type=\"text\" value={name} onChange={handleInputValueChange}/>\r\n            <label>Keyword</label>\r\n            <input name=\"keyword\" type=\"text\" value={keyword} onChange={handleInputValueChange}/>\r\n            <label>Bid amount</label>\r\n            <input name=\"bidAmount\" type=\"number\" min=\"20\" placeholder=\"min. value 20\" value={bidAmount} onChange={handleInputValueChange}/>\r\n            <label>Campaign fund</label>\r\n            <input name=\"campaignFund\" type=\"number\" value={campaignFund} onChange={handleInputValueChange}/>\r\n            <label>Town</label>\r\n            <select name=\"town\" id=\"town\" value={town} onChange={handleInputValueChange}>\r\n                <option value=\"\">-</option>\r\n                <option value=\"cracow\">Cracow</option>\r\n                <option value=\"warsaw\">Warsaw</option>\r\n                <option value=\"sopot\">Sopot</option>\r\n                <option value=\"wroclaw\">Wroc≈Çaw</option>\r\n                <option value=\"katowice\">Katowice</option>\r\n                <option value=\"gdynia\">Gdynia</option>\r\n                <option value=\"zakopane\">Zakopane</option>\r\n            </select>\r\n            <label>Radius [km]</label>\r\n            <input name=\"radius\" type=\"number\" value={radius} onChange={handleInputValueChange}/>\r\n            <label>Status</label>\r\n            <input name=\"status\" type=\"checkbox\" checked={status} value={status} onChange={handleInputValueChange}/>\r\n            <button type=\"submit\">Add campaign</button>\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddCampaign;","import React from 'react'\r\n\r\nconst Account = ({account}) => {\r\n    \r\n    return ( \r\n        <>\r\n        <h2>Company account</h2>\r\n        <div>{account}</div>\r\n        </>\r\n     );\r\n}\r\n \r\nexport default Account;","import React, {useState} from 'react';\r\n\r\nconst Campaign = (props) => {\r\n\r\n    const {name, keyword, bidAmount, campaignFund, town, radius, status, id, edit, deleteCampaign} = props;\r\n    \r\n    const [isEdit,setIsEdit]=useState(false);\r\n    const [editValues,setEditValues] = useState(props);\r\n\r\n    const handleEdit = id => {\r\n        setIsEdit(true)\r\n    }\r\n\r\n    const handleSave = id => {\r\n        setIsEdit(false);\r\n        if(editValues) {\r\n            edit(editValues.name, editValues.keyword, editValues.bidAmount, editValues.campaignFund, editValues.town, editValues.radius, editValues.status, id)\r\n        }\r\n        else {\r\n            setEditValues(name, keyword, bidAmount, campaignFund, town, radius, status)\r\n        }\r\n    }\r\n\r\n    const handleEditInputChange = e => {\r\n        \r\n        if (e.target.type === \"checkbox\") {\r\n          setEditValues({\r\n            ...editValues,\r\n            [e.target.name]: e.target.checked,\r\n          })\r\n        } else {\r\n          setEditValues({\r\n            ...editValues,\r\n            [e.target.name]: e.target.value\r\n          })\r\n        }\r\n        \r\n      }\r\n    \r\n    const btnStatus = status ? \"On\" : \"Off\";\r\n    \r\n    if(isEdit){\r\n        return (\r\n            <tr>\r\n                <td><input type=\"checkbox\" name=\"status\" checked={editValues.status} value={editValues.status} onChange={handleEditInputChange}/></td>\r\n                <td><input type=\"text\" name=\"name\" value={editValues.name} onChange={handleEditInputChange}/></td>\r\n                <td><input type=\"text\" name=\"keyword\" value={editValues.keyword} onChange={handleEditInputChange}/></td>\r\n                <td><input type=\"number\" name=\"bidAmount\" min=\"20\" value={editValues.bidAmount} onChange={handleEditInputChange}/></td>\r\n                <td><input type=\"number\" name=\"campaignFund\" value={editValues.campaignFund} onChange={handleEditInputChange}/></td>\r\n                <td><select name=\"town\" value={editValues.town} onChange={handleEditInputChange}>\r\n                <option value=\"\">-</option>\r\n                <option value=\"cracow\">Cracow</option>\r\n                <option value=\"warsaw\">Warsaw</option>\r\n                <option value=\"sopot\">Sopot</option>\r\n                <option value=\"wroclaw\">Wroc≈Çaw</option>\r\n                <option value=\"katowice\">Katowice</option>\r\n                <option value=\"gdynia\">Gdynia</option>\r\n                <option value=\"zakopane\">Zakopane</option>\r\n            </select></td>\r\n                <td><input type=\"number\" name=\"radius\" value={editValues.radius} onChange={handleEditInputChange}/></td>\r\n                <td>\r\n                    <button onClick={() => handleSave(id)}>Save</button>\r\n                    <button onClick={() => deleteCampaign(id)} disabled>X</button>\r\n                </td>\r\n            </tr>\r\n         );\r\n    }\r\n    else {\r\n        return (\r\n            <tr>\r\n                <td>{btnStatus}</td>\r\n                <td>{name}</td>\r\n                <td>{keyword}</td>\r\n                <td>{bidAmount}</td>\r\n                <td>{campaignFund}</td>\r\n                <td>{town.toUpperCase()}</td>\r\n                <td>{radius}</td>\r\n                <td>\r\n                    <button onClick={() => handleEdit(id)}>Edit</button>\r\n                    <button onClick={() => deleteCampaign(id)}>X</button>\r\n                </td>\r\n            </tr>\r\n         );\r\n    }\r\n    \r\n    \r\n}\r\n \r\nexport default Campaign;","import React from 'react';\r\nimport Campaign from './Campaign';\r\n\r\nconst ListCampaign = (props) => {\r\n    \r\n    const campaignsList = props.campaigns.map(campaign =>(\r\n        <Campaign\r\n        deleteCampaign={props.deleteCampaign}\r\n        edit={props.edit}\r\n        key={campaign.id}\r\n        id={campaign.id}\r\n        name={campaign.name}\r\n        keyword={campaign.keyword}\r\n        bidAmount={campaign.bidAmount}\r\n        campaignFund={campaign.campaignFund}\r\n        town={campaign.town}\r\n        radius={campaign.radius}\r\n        status={campaign.status}/>\r\n    ))\r\n    return ( \r\n        <>\r\n        <h3>Campaign list:</h3>\r\n        <table>\r\n            <thead>\r\n            <tr>\r\n                <th>Status</th>\r\n                <th>Campaign name</th>\r\n                <th>Keyword</th>\r\n                <th>Bid amount</th>\r\n                <th>Campaign fund</th>\r\n                <th>Town</th>\r\n                <th>Radius[km]</th>\r\n                <th>Edit/Delete</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n                {campaignsList} \r\n            </tbody>\r\n        </table>\r\n        </>\r\n     );\r\n}\r\n \r\nexport default ListCampaign;","import React, {useState} from 'react';\r\nimport '../style/App.sass';\r\n\r\nimport AddCampaign from './AddCampaign';\r\nimport Account from './Account';\r\nimport ListCampaign from './ListCampaign';\r\n\r\nlet counter = 0;\r\nconst companyAccount = 300000;\r\n\r\nconst App = () => {\r\n  \r\n  const [campaigns, setCampaigns] = useState([]);\r\n  const [account, setAccount] = useState(companyAccount);\r\n\r\n  const addNewCampaign = (name,keyword,bidAmount,campaignFund,town,radius,status) => {\r\n    const campaign = {\r\n      id: counter,\r\n      name,\r\n      keyword,\r\n      bidAmount,\r\n      campaignFund,\r\n      town,\r\n      radius,\r\n      status\r\n    }\r\n    counter++;\r\n\r\n    setCampaigns(prevState => [...prevState, campaign])\r\n    \r\n  }\r\n  const deleteCampaign = (id) => {\r\n    const campaignsList = [...campaigns];\r\n    const newCampaignsList = campaignsList.filter(campaign => campaign.id !== id);\r\n    \r\n    setCampaigns(newCampaignsList)\r\n  }\r\n  const editCampaign = (name, keyword, bidAmount, campaignFund, town, radius, status, id) => {\r\n    const campaignsList = [...campaigns];\r\n    campaignsList.forEach((campaign,index) => {\r\n      setAccount(prevState => prevState - (campaignFund - campaign.campaignFund))\r\n      if(index === id){\r\n        return(\r\n        campaign.name =  name,\r\n        campaign.keyword = keyword,\r\n        campaign.bidAmount = bidAmount,\r\n        campaign.campaignFund = campaignFund,\r\n        campaign.town = town,\r\n        campaign.radius = radius,\r\n        campaign.status = status\r\n        )\r\n      }})\r\n    setCampaigns(campaignsList)\r\n    \r\n  }\r\n\r\n  const newAccountValue =(campaignFund) => {\r\n    setAccount(prevState => prevState - campaignFund)\r\n    \r\n  }\r\n  return (\r\n    \r\n    <div className=\"app\">\r\n      <AddCampaign add={addNewCampaign} account={newAccountValue} accountValue={account}/>\r\n      <Account account={account}/>\r\n      <ListCampaign campaigns={campaigns} deleteCampaign={deleteCampaign} edit={editCampaign}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.sass';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}