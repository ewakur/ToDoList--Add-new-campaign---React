{"version":3,"sources":["components/AddCampaign.js","components/Account.js","components/Campaign.js","components/ListCampaign.js","components/App.js","serviceWorker.js","index.js"],"names":["AddCampaign","props","useState","name","keyword","bidAmount","campaignFund","town","radius","status","state","setState","handleInputValueChange","e","target","type","checked","value","className","onSubmit","preventDefault","accountValue","length","alert","add","account","onChange","min","placeholder","id","Account","Campaign","edit","deleteCampaign","btnStatus","toUpperCase","onClick","ListCampaign","campaignsList","campaigns","map","campaign","key","counter","App","setCampaigns","setAccount","prevState","newCampaignsList","filter","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6RAoFeA,G,MAjFK,SAACC,GAAW,IAAD,EACFC,mBAAS,CAC9BC,KAAM,GACNC,QAAS,GACTC,UAAW,GACXC,aAAc,GACdC,KAAM,GACNC,OAAO,GACPC,QAAQ,IARe,mBACpBC,EADoB,KACdC,EADc,KAWnBC,EAAyB,SAAAC,GAEP,aAAlBA,EAAEC,OAAOC,KACXJ,EAAS,2BACJD,GADG,kBAELG,EAAEC,OAAOX,KAAOU,EAAEC,OAAOE,WAG5BL,EAAS,2BACJD,GADG,kBAELG,EAAEC,OAAOX,KAAOU,EAAEC,OAAOG,UAKzBd,EAAgEO,EAAhEP,KAAMC,EAA0DM,EAA1DN,QAASC,EAAiDK,EAAjDL,UAAWC,EAAsCI,EAAtCJ,aAAcC,EAAwBG,EAAxBH,KAAMC,EAAkBE,EAAlBF,OAAQC,EAAUC,EAAVD,OAsB/D,OACI,oCACA,gDACA,0BAAMS,UAAU,eAAeC,SAxBR,SAAAN,GAGrB,GAFAA,EAAEO,mBAECjB,GAAQC,GAAWC,GAAaC,GAAcL,EAAMoB,cAAgBd,EAAKe,OAAS,GAAKd,GAavF,OAAIF,EAAaL,EAAMoB,aAAqBE,MAAM,6DAE3CA,MAAM,4CAddtB,EAAMuB,IAAIrB,EAAMC,EAASC,EAAWC,EAAcC,EAAMC,EAAQC,GAChER,EAAMwB,QAAQnB,GACdK,EAAS,CACLR,KAAM,GACNC,QAAS,GACTC,UAAW,GACXC,aAAc,GACdC,KAAM,GACNC,OAAO,GACPC,QAAQ,MAYZ,gDACA,2BAAON,KAAK,OAAOY,KAAK,OAAOE,MAAOd,EAAMuB,SAAUd,IACtD,0CACA,2BAAOT,KAAK,UAAUY,KAAK,OAAOE,MAAOb,EAASsB,SAAUd,IAC5D,6CACA,2BAAOT,KAAK,YAAYY,KAAK,SAASY,IAAI,KAAKC,YAAY,gBAAgBX,MAAOZ,EAAWqB,SAAUd,IACvG,gDACA,2BAAOT,KAAK,eAAeY,KAAK,SAASE,MAAOX,EAAcoB,SAAUd,IACxE,uCACA,4BAAQT,KAAK,OAAO0B,GAAG,OAAOZ,MAAOV,EAAMmB,SAAUd,GACjD,4BAAQK,MAAM,IAAd,KACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,WAAd,gBACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,YAAd,aAEJ,8CACA,2BAAOd,KAAK,SAASY,KAAK,SAASE,MAAOT,EAAQkB,SAAUd,IAC5D,yCACA,2BAAOT,KAAK,SAASY,KAAK,WAAWC,QAASP,EAAQQ,MAAOR,EAAQiB,SAAUd,IAC/E,4BAAQG,KAAK,UAAb,oBClEGe,EAVC,SAAC,GAAe,IAAdL,EAAa,EAAbA,QAEd,OACI,oCACA,+CACA,6BAAMA,KCcCM,EAnBE,SAAC,GAA8F,IAA7F5B,EAA4F,EAA5FA,KAAMC,EAAsF,EAAtFA,QAASC,EAA6E,EAA7EA,UAAWC,EAAkE,EAAlEA,aAAcC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQoB,EAA8B,EAA9BA,GAAIG,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,eAEjFC,EAAYzB,EAAS,KAAO,MAElC,OACI,4BACI,4BAAKyB,GACL,4BAAK/B,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKC,EAAK4B,eACV,4BAAK3B,GACL,4BAAI,4BAAQ4B,QAAS,kBAAMJ,EAAK7B,EAAMC,EAASC,EAAWC,EAAcC,EAAMC,EAAQC,EAAQoB,KAA1F,QAA4G,4BAAQO,QAAS,kBAAMH,EAAeJ,KAAtC,QC4B7GQ,EAxCM,SAACpC,GAElB,IAAMqC,EAAgBrC,EAAMsC,UAAUC,KAAI,SAAAC,GAAQ,OAC9C,kBAAC,EAAD,CACAR,eAAgBhC,EAAMgC,eACtBD,KAAM/B,EAAM+B,KACZU,IAAKD,EAASZ,GACdA,GAAIY,EAASZ,GACb1B,KAAMsC,EAAStC,KACfC,QAASqC,EAASrC,QAClBC,UAAWoC,EAASpC,UACpBC,aAAcmC,EAASnC,aACvBC,KAAMkC,EAASlC,KACfC,OAAQiC,EAASjC,OACjBC,OAAQgC,EAAShC,YAErB,OACI,oCACA,8CACA,+BACI,+BACA,4BACI,sCACA,6CACA,uCACA,0CACA,6CACA,oCACA,0CACA,6CAGJ,+BACK6B,MC7BbK,EAAU,EA+CCC,EA5CH,WAAO,IAAD,EAEkB1C,mBAAS,IAF3B,mBAETqC,EAFS,KAEEM,EAFF,OAGc3C,mBALT,KAEL,mBAGTuB,EAHS,KAGAqB,EAHA,KAkChB,OAEE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,CAAaM,IAhCM,SAACrB,EAAKC,EAAQC,EAAUC,EAAaC,EAAKC,EAAOC,GACtE,IAAMgC,EAAW,CACfZ,GAAIc,EACJxC,OACAC,UACAC,YACAC,eACAC,OACAC,SACAC,UAEFkC,IAEAE,GAAa,SAAAE,GAAS,4BAAQA,GAAR,CAAmBN,QAmBLhB,QAPf,SAACnB,GACtBwC,GAAW,SAAAC,GAAS,OAAIA,EAAYzC,MAM0Be,aAAcI,IAC1E,kBAAC,EAAD,CAASA,QAASA,IAClB,kBAAC,EAAD,CAAcc,UAAWA,EAAWN,eAlBjB,SAACJ,GACtB,IACMmB,EADa,YAAOT,GACaU,QAAO,SAAAR,GAAQ,OAAIA,EAASZ,KAAOA,KAE1EgB,EAAaG,IAcyDhB,KAZnD,SAAC7B,EAAMC,EAASC,EAAWC,EAAcC,EAAMC,EAAQC,EAAQoB,GAClFqB,QAAQC,IAAR,oBAA8B/C,SC1BdgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.a20ccf65.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport '../style/AddCampaign.sass';\r\n\r\nconst AddCampaign = (props) => {\r\n    const [state,setState] = useState({\r\n        name: '',\r\n        keyword: '',\r\n        bidAmount: '',\r\n        campaignFund: '',\r\n        town: '',\r\n        radius:'',\r\n        status: false\r\n      })\r\n    \r\n      const handleInputValueChange = e => {\r\n        \r\n        if (e.target.type === \"checkbox\") {\r\n          setState({\r\n            ...state,\r\n            [e.target.name]: e.target.checked,\r\n          })\r\n        } else {\r\n          setState({\r\n            ...state,\r\n            [e.target.name]: e.target.value\r\n          })\r\n        }\r\n        \r\n      }\r\n      const {name, keyword, bidAmount, campaignFund, town, radius, status} = state;\r\n      const handleAddNewTask = e => {\r\n          e.preventDefault();\r\n          \r\n          if(name && keyword && bidAmount && campaignFund<=props.accountValue && town.length > 2 && radius){\r\n            props.add(name, keyword, bidAmount, campaignFund, town, radius, status);\r\n            props.account(campaignFund);\r\n            setState({\r\n                name: '',\r\n                keyword: '',\r\n                bidAmount: '',\r\n                campaignFund: '',\r\n                town: '',\r\n                radius:'',\r\n                status: false\r\n              })\r\n        }\r\n        else if (campaignFund>props.accountValue) return alert('Not enough money on company accout - change Campaign Fund')\r\n\r\n        else return alert(\"Some values are missing - please add all\")\r\n      }\r\n\r\n    return (\r\n        <>\r\n        <h1>Add new campaign</h1>\r\n        <form className='add-campaign' onSubmit={handleAddNewTask}>\r\n            <label>Campaign name</label>\r\n            <input name=\"name\" type=\"text\" value={name} onChange={handleInputValueChange}/>\r\n            <label>Keyword</label>\r\n            <input name=\"keyword\" type=\"text\" value={keyword} onChange={handleInputValueChange}/>\r\n            <label>Bid amount</label>\r\n            <input name=\"bidAmount\" type=\"number\" min=\"20\" placeholder=\"min. value 20\" value={bidAmount} onChange={handleInputValueChange}/>\r\n            <label>Campaign fund</label>\r\n            <input name=\"campaignFund\" type=\"number\" value={campaignFund} onChange={handleInputValueChange}/>\r\n            <label>Town</label>\r\n            <select name=\"town\" id=\"town\" value={town} onChange={handleInputValueChange}>\r\n                <option value=\"\">-</option>\r\n                <option value=\"cracow\">Cracow</option>\r\n                <option value=\"warsaw\">Warsaw</option>\r\n                <option value=\"sopot\">Sopot</option>\r\n                <option value=\"wroclaw\">Wroc≈Çaw</option>\r\n                <option value=\"katowice\">Katowice</option>\r\n                <option value=\"gdynia\">Gdynia</option>\r\n                <option value=\"zakopane\">Zakopane</option>\r\n            </select>\r\n            <label>Radius [km]</label>\r\n            <input name=\"radius\" type=\"number\" value={radius} onChange={handleInputValueChange}/>\r\n            <label>Status</label>\r\n            <input name=\"status\" type=\"checkbox\" checked={status} value={status} onChange={handleInputValueChange}/>\r\n            <button type=\"submit\">Add campaign</button>\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddCampaign;","import React from 'react'\r\n\r\nconst Account = ({account}) => {\r\n    \r\n    return ( \r\n        <>\r\n        <h2>Company account</h2>\r\n        <div>{account}</div>\r\n        </>\r\n     );\r\n}\r\n \r\nexport default Account;","import React from 'react';\r\n\r\nconst Campaign = ({name, keyword, bidAmount, campaignFund, town, radius, status, id, edit, deleteCampaign}) => {\r\n    \r\n    const btnStatus = status ? \"On\" : \"Off\";\r\n    \r\n    return (\r\n        <tr>\r\n            <td>{btnStatus}</td>\r\n            <td>{name}</td>\r\n            <td>{keyword}</td>\r\n            <td>{bidAmount}</td>\r\n            <td>{campaignFund}</td>\r\n            <td>{town.toUpperCase()}</td>\r\n            <td>{radius}</td>\r\n            <td><button onClick={() => edit(name, keyword, bidAmount, campaignFund, town, radius, status, id)}>Edit</button><button onClick={() => deleteCampaign(id)}>X</button></td>\r\n        </tr>\r\n        \r\n     );\r\n}\r\n \r\nexport default Campaign;","import React from 'react';\r\nimport Campaign from './Campaign';\r\n\r\nconst ListCampaign = (props) => {\r\n    \r\n    const campaignsList = props.campaigns.map(campaign =>(\r\n        <Campaign\r\n        deleteCampaign={props.deleteCampaign}\r\n        edit={props.edit}\r\n        key={campaign.id}\r\n        id={campaign.id}\r\n        name={campaign.name}\r\n        keyword={campaign.keyword}\r\n        bidAmount={campaign.bidAmount}\r\n        campaignFund={campaign.campaignFund}\r\n        town={campaign.town}\r\n        radius={campaign.radius}\r\n        status={campaign.status}/>\r\n    ))\r\n    return ( \r\n        <>\r\n        <h3>Campaign list:</h3>\r\n        <table>\r\n            <thead>\r\n            <tr>\r\n                <th>Status</th>\r\n                <th>Campaign name</th>\r\n                <th>Keyword</th>\r\n                <th>Bid amount</th>\r\n                <th>Campaign fund</th>\r\n                <th>Town</th>\r\n                <th>Radius[km]</th>\r\n                <th>Edit/Delete</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n                {campaignsList} \r\n            </tbody>\r\n        </table>\r\n        </>\r\n     );\r\n}\r\n \r\nexport default ListCampaign;","import React, {useState} from 'react';\nimport '../style/App.sass';\n\nimport AddCampaign from './AddCampaign';\nimport Account from './Account';\nimport ListCampaign from './ListCampaign';\n\nlet counter = 0;\nconst companyAccount = 300000;\n\nconst App = () => {\n  \n  const [campaigns, setCampaigns] = useState([]);\n  const [account, setAccount] = useState(companyAccount);\n\n  const addNewCampaign = (name,keyword,bidAmount,campaignFund,town,radius,status) => {\n    const campaign = {\n      id: counter,\n      name,\n      keyword,\n      bidAmount,\n      campaignFund,\n      town,\n      radius,\n      status\n    }\n    counter++;\n\n    setCampaigns(prevState => [...prevState, campaign])\n    \n  }\n  const deleteCampaign = (id) => {\n    const campaignsList = [...campaigns];\n    const newCampaignsList = campaignsList.filter(campaign => campaign.id !== id);\n    \n    setCampaigns(newCampaignsList)\n  }\n  const editCampaign = (name, keyword, bidAmount, campaignFund, town, radius, status, id) => {\n    console.log(`edytujemy ${name,keyword}`)\n  }\n  const newAccountValue =(campaignFund) => {\n    setAccount(prevState => prevState - campaignFund)\n    \n  }\n  return (\n    \n    <div className=\"app\">\n      <AddCampaign add={addNewCampaign} account={newAccountValue} accountValue={account}/>\n      <Account account={account}/>\n      <ListCampaign campaigns={campaigns} deleteCampaign={deleteCampaign} edit={editCampaign}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.sass';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}